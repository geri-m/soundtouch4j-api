<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">

  <modelVersion>4.0.0</modelVersion>
  <groupId>org.soundtouch4j</groupId>
  <artifactId>soundtouch4j-api</artifactId>
  <packaging>jar</packaging>
  <version>1.0.8-SNAPSHOT</version>
  <name>SoundTouch API Java Client</name>
  <description>API for Java (soundtouch4j-api) provides a full featured Java API for working with
    Bose's SoundTouch
  </description>
  <url>https://github.com/geri-m/soundtouch4j</url>

  <licenses>
    <license>
      <name>The MIT License (MIT)</name>
      <url>http://opensource.org/licenses/MIT</url>
      <distribution>repo</distribution>
    </license>
  </licenses>

  <developers>
    <developer>
      <id>geri-m</id>
      <name>Gerald Madlmayr</name>
      <email>gerald.madlmayr@gmx.at</email>
    </developer>
  </developers>

  <properties>
    <java.source.version>1.6</java.source.version>
    <java.target.version>1.6</java.target.version>
    <google.http.client.version>1.30.1</google.http.client.version>
    <junit.version>5.4.2</junit.version>
    <log4j2.version>2.16.0</log4j2.version>
    <ssdp.version>2.2.0</ssdp.version>
    <awaitility.version>3.1.6</awaitility.version>
    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
    <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
  </properties>

  <scm>
    <url>git@github.com:geri-m/soundtouch4j-api.git</url>
    <connection>scm:git:git@github.com:geri-m/soundtouch4j-api.git</connection>
    <developerConnection>scm:git:git@github.com:geri-m/soundtouch4j-api.git</developerConnection>
    <tag>soundtouch4j-api-1.0.7</tag>
  </scm>

  <dependencies>
    <!-- XML Support is still Beta, but works fine for our usecase -->
    <dependency>
      <groupId>com.google.http-client</groupId>
      <artifactId>google-http-client-xml</artifactId>
      <version>${google.http.client.version}</version>
    </dependency>

    <!-- since 2.7 this include the logj4-api as well -->
    <dependency>
      <groupId>org.apache.logging.log4j</groupId>
      <artifactId>log4j-core</artifactId>
      <version>${log4j2.version}</version>
      <scope>test</scope>
    </dependency>

    <dependency>
      <groupId>org.apache.logging.log4j</groupId>
      <artifactId>log4j-slf4j-impl</artifactId>
      <version>${log4j2.version}</version>
      <scope>test</scope>
    </dependency>

    <dependency>
      <groupId>io.resourcepool</groupId>
      <artifactId>ssdp-client</artifactId>
      <version>${ssdp.version}</version>
      <scope>test</scope>
    </dependency>

    <dependency>
      <groupId>org.junit.jupiter</groupId>
      <artifactId>junit-jupiter-api</artifactId>
      <version>${junit.version}</version>
      <scope>test</scope>
    </dependency>

    <dependency>
      <groupId>org.junit.jupiter</groupId>
      <artifactId>junit-jupiter-engine</artifactId>
      <version>${junit.version}</version>
      <scope>test</scope>
    </dependency>

    <!-- Required for the SSDP Scanner IT-->
    <dependency>
      <groupId>org.awaitility</groupId>
      <artifactId>awaitility</artifactId>
      <version>${awaitility.version}</version>
      <scope>test</scope>
    </dependency>

  </dependencies>

  <build>

    <finalName>soundtouch4j-api</finalName>
    <plugins>

      <!-- The deploy plugin is primarily used during the deploy phase, to add your artifact(s) to a remote repository for sharing with other
      developers and projects. http://maven.apache.org/plugins/maven-deploy-plugin/ -->
      <plugin>
        <artifactId>maven-deploy-plugin</artifactId>
        <version>2.8.2</version>
        <executions>
          <execution>
            <id>default-deploy</id>
            <phase>deploy</phase>
            <goals>
              <goal>deploy</goal>
            </goals>
          </execution>
        </executions>
      </plugin>

      <!-- This plugin is used to release a project with Maven, saving a lot of repetitive, manual work.
           http://maven.apache.org/maven-release/maven-release-plugin/  -->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-release-plugin</artifactId>
        <version>2.5.3</version>
        <configuration>
          <localCheckout>true</localCheckout>
          <pushChanges>false</pushChanges>
          <mavenExecutorId>forked-path</mavenExecutorId>
        </configuration>
        <dependencies>
          <dependency>
            <groupId>org.apache.maven.scm</groupId>
            <artifactId>maven-scm-provider-gitexe</artifactId>
            <version>1.9.5</version>
          </dependency>
        </dependencies>
      </plugin>

      <!-- The SCM Plugin offers vendor independent access to common scm commands by offering a set of command mappings for the configured scm.
      Requires to update the Head and interact with git -->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-scm-plugin</artifactId>
        <version>1.9.5</version>
        <configuration>
          <tag>${project.artifactId}-${project.version}</tag>
        </configuration>
      </plugin>

      <!-- Maven Plugin to control Nexus Staging workflow
           https://github.com/sonatype/nexus-maven-plugins/tree/master/staging/maven-plugin -->
      <plugin>
        <groupId>org.sonatype.plugins</groupId>
        <artifactId>nexus-staging-maven-plugin</artifactId>
        <version>1.6.8</version>
        <extensions>true</extensions>
        <configuration>
          <serverId>ossrh</serverId>
          <nexusUrl>https://oss.sonatype.org/</nexusUrl>
          <autoReleaseAfterClose>true</autoReleaseAfterClose>
        </configuration>
      </plugin>

      <!-- The Compiler Plugin is used to compile the sources of your project  https://maven.apache.org/plugins/maven-compiler-plugin/ -->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-compiler-plugin</artifactId>
        <version>3.8.1</version>
        <configuration>
          <source>${java.source.version}</source>
          <target>${java.target.version}</target>
        </configuration>
        <executions>
          <execution>
            <id>default-compile</id>
          </execution>
        </executions>
      </plugin>

      <!-- The Source Plugin creates a jar archive of the source files of the current project.  https://maven.apache.org/plugins/maven-source-plugin/ -->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-source-plugin</artifactId>
        <version>3.1.0</version>
        <executions>
          <execution>
            <id>attach-sources</id>
            <goals>
              <goal>jar-no-fork</goal>
            </goals>
          </execution>
        </executions>
      </plugin>

      <!-- Generating Java Doc as Part of Build https://maven.apache.org/plugins/maven-javadoc-plugin/ -->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-javadoc-plugin</artifactId>
        <version>3.1.0</version>
        <executions>
          <execution>
            <id>attach-javadocs</id>
            <goals>
              <goal>jar</goal>
            </goals>
          </execution>
        </executions>
      </plugin>

      <!-- Running Integration Tests and generate XML Results https://maven.apache.org/surefire/maven-failsafe-plugin/  -->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-failsafe-plugin</artifactId>
        <version>2.22.1</version>
        <configuration>
          <includes>
            <include>**/*IT.java</include>
          </includes>
        </configuration>
        <executions>
          <execution>
            <phase>integration-test</phase>
            <goals>
              <goal>integration-test</goal>
              <goal>verify</goal>
            </goals>
          </execution>
        </executions>
      </plugin>

      <!-- Running Unit Tests and generate XML Results https://maven.apache.org/surefire/maven-surefire-plugin/ -->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-surefire-plugin</artifactId>
        <version>2.22.1</version>
        <configuration>
          <includes>
            <include>**/*Test.java</include>
          </includes>
        </configuration>
      </plugin>

      <!-- Static Code Analysis https://docs.sonarqube.org/display/SCAN/Analyzing+with+SonarQube+Scanner+for+Maven -->
      <plugin>
        <groupId>org.sonarsource.scanner.maven</groupId>
        <artifactId>sonar-maven-plugin</artifactId>
        <version>3.6.0.1398</version>
      </plugin>

      <!-- adding the JaCoCo plugin right here to create XML Reports for SonarCloud.io, so we have more control -->
      <plugin>
        <groupId>org.jacoco</groupId>
        <artifactId>jacoco-maven-plugin</artifactId>
        <version>0.8.4</version>
        <executions>
          <execution>
            <goals>
              <goal>prepare-agent</goal>
            </goals>
          </execution>
          <!-- attached to Maven test phase -->
          <execution>
            <id>report</id>
            <phase>test</phase>
            <goals>
              <goal>report</goal>
            </goals>
          </execution>
        </executions>
      </plugin>


    </plugins>
  </build>

  <!-- Creating Nice HTML Output of Tests for Reporting Purpose -->
  <reporting>
    <plugins>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-surefire-report-plugin</artifactId>
        <version>2.22.0</version>
      </plugin>
      <plugin>
        <!-- https://maven.apache.org/plugins/maven-site-plugin/ -->
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-site-plugin</artifactId>
        <version>3.7.1</version>
      </plugin>
      <plugin>
        <!-- maven-project-info-reports-plugin -->
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-project-info-reports-plugin</artifactId>
        <version>3.0.0</version>
        <reportSets>
          <reportSet>
            <configuration>
              <skip>true</skip>
            </configuration>
          </reportSet>
        </reportSets>
      </plugin>
        <!-- Creating links within JavaDoc https://stackoverflow.com/questions/12038238/unable-to-locate-source-xref-to-link-to -->
        <plugin>
            <groupId>org.apache.maven.plugins</groupId>
            <artifactId>maven-jxr-plugin</artifactId>
            <version>3.0.0</version>
        </plugin>
    </plugins>
  </reporting>

  <profiles>
    <!-- GPG Signature on release -->
    <profile>
      <id>release-sign-artifacts</id>
      <activation>
        <property>
          <name>performRelease</name>
          <value>true</value>
        </property>
      </activation>
      <build>
        <plugins>
          <!-- http://maven.apache.org/plugins/maven-gpg-plugin/ -->
          <plugin>
            <groupId>org.apache.maven.plugins</groupId>
            <artifactId>maven-gpg-plugin</artifactId>
            <version>1.6</version>
            <executions>
              <execution>
                <id>sign-artifacts</id>
                <phase>verify</phase>
                <goals>
                  <goal>sign</goal>
                </goals>
              </execution>
            </executions>
            <configuration>
              <keyname>${gpg.keyname}</keyname>
              <passphrase>${gpg.passphrase}</passphrase>
            </configuration>
          </plugin>
        </plugins>
      </build>
    </profile>

    <profile>
        <!-- we can get rid of this, as soon as we change to Surefire 3.0.0-Mx, see https://issues.apache.org/jira/browse/SUREFIRE-1588 -->
      <id>SUREFIRE-1588</id>
      <activation>
        <activeByDefault>true</activeByDefault>
      </activation>
      <properties>
        <argLine>-Djdk.net.URLClassPath.disableClassPathURLCheck=true</argLine>
      </properties>
    </profile>
  </profiles>

  <distributionManagement>
    <snapshotRepository>
      <id>ossrh</id>
      <url>https://oss.sonatype.org/content/repositories/snapshots</url>
    </snapshotRepository>
    <repository>
      <id>ossrh</id>
      <url>https://oss.sonatype.org/service/local/staging/deploy/maven2/
      </url>
    </repository>
  </distributionManagement>


</project>